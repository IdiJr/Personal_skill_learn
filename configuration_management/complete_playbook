# contains commands for a how the playbook will be written
# hosts: all The playbook starts by stating that it should be applied to all hosts in your inventory (hosts: all). It is possible to restrict the playbook’s execution to a specific host, or a group of hosts. This option can be overwritten at execution time.

# become: true The become: true portion tells Ansible to use privilege escalation (sudo) for executing all the tasks in this playbook. This option can be overwritten on a task-by-task basis.

# vars Defines a variable, doc_root, which is later used in a task. This section could contain multiple variables.

# tasks The section where the actual tasks are defined. The first task updates the apt cache, and the second task installs the package apache2.

# The third task uses the built-in module file to create a directory to serve as our document root. This module can be used to manage files and directories.

# The fourth task uses the module copy to copy a local file to the remote server. We’re copying a simple HTML file to be served as our website hosted by Apache.

# handlers Finally, we have the handlers section, where the services are declared. We define the restart apache handler that is notified from the fourth task, where the Apache template is applied

# You can use ansible-playbook to execute the playbook after importing into the Ansible control node in multiple nodes from the inventory

---
- hosts: all
  become: true
  vars:
    doc_root: /var/www/example
  tasks:
    - name: Update apt
      apt: update_cache=yes

    - name: Install Apache
      apt: name=apache2 state=latest

    - name: Create custom document root
      file: path={{ doc_root }} state=directory owner=www-data group=www-data

    - name: Set up HTML file
      copy: src=index.html dest={{ doc_root }}/index.html owner=www-data group=www-data mode=0644

    - name: Set up Apache virtual host file
      template: src=vhost.tpl dest=/etc/apache2/sites-available/000-default.conf
      notify: restart apache
  handlers:
    - name: restart apache
      service: name=apache2 state=restarted

# Commands to execute playbook
ansible-playbook playbook.yml

# `-l` can be used to limit execution to a single host or group from inventory
ansible-playbook -l host_or_group_name playbook.yml

# If you need to specify a different SSH user to connect to the remote server, you can include the argument -u user to that command
ansible-playbook -l host_or_group_name playbook.yml -u remote-user
